diff --git a/setup.py b/setup.py
index a1e5d6e..b7dd818 100644
--- a/setup.py
+++ b/setup.py
@@ -1,4 +1,4 @@
-import re
+
 import re
 import os
 import sys
@@ -13,7 +13,7 @@ WITH_MPI = False
 
 opt_flags = {
     'Release': {
-        'unix': ['-O3', '-DNDEBUG', '-march=native', '-mtune=native', '-ffast-math', '-fvisibility=hidden']
+        'unix': ['-O3', '-DNDEBUG']
     },
     'Debug': {
         'unix': ['-g']
@@ -73,47 +73,51 @@ class CMakeBuildExt(build_ext):
                 # Hint CMake to use the same Python executable that
                 # is launching the build, prevents possible mismatching if
                 # multiple versions of Python are installed
-                '-DPython3_EXECUTABLE={}'.format(sys.executable),
+                f'-DPython3_EXECUTABLE={sys.executable}',
                 # Add other project-specific CMake arguments if needed
                 # ...
-                f'-DUSE_MPI={"ON" if self.with_mpi else "OFF"}',
+                '-DUSE_MPI={}'.format("ON" if self.with_mpi else "OFF"),
                 # '-DCMAKE_CXX_FLAGS_{}={}'.format(cfg.upper(),  )
             ]
             cmake_cxx_flags = ' '.join(opt_flags.get(cfg, {}).get(self.compiler.compiler_type, []))
 
             env_var_prefix = 'SQS_'
-            # we allow to overload cmake compiler options
+            # we allow overloading cmake compiler options
             for env_var_name, env_var_value in os.environ.items():
                 if env_var_name == 'CMAKE_CXX_FLAGS':
                     # we append them to our release/debug flags
                     cmake_cxx_flags += f' {env_var_value}'
                 elif env_var_name.startswith('CMAKE'):
+                    print(f'sqsgenerator.setup: Forwarding env-var "{env_var_name}" -> "-D{env_var_name}"')
                     cmake_args.append(f'-D{env_var_name}={env_var_value}')
                 m = re.match(f'{env_var_prefix}(?P<varname>\w+)', env_var_name)
                 if m:
                     env_var_name_real = m.groupdict()['varname']
+                    print(f'sqsgenerator.setup: Forwarding env-var "{env_var_name}" -> "-D{env_var_name_real}"')
                     cmake_args.append(f'-D{env_var_name_real}={env_var_value}')
 
-            cmake_args.append('-DCMAKE_CXX_FLAGS_{}={}'.format(cfg.upper(), cmake_cxx_flags))
-            pprint.pprint(cmake_args)
+            cmake_args.append(f'-DCMAKE_CXX_FLAGS_{cfg.upper()}={cmake_cxx_flags}')
             # We can handle some platform-specific settings at our discretion
             if platform.system() == 'Windows':
-                plat = ('x64' if platform.architecture()[0] == '64bit' else 'Win32')
+                print('sqsgenerator.setup.py -> configuring CMake for Windows')
+                # plat = ('x64' if platform.architecture()[0] == '64bit' else 'Win32')
                 cmake_args += [
                     # These options are likely to be needed under Windows
                     '-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE',
-                    '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir),
+                    f'-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{cfg.upper()}={extdir}'
                 ]
                 # Assuming that Visual Studio and MinGW are supported compilers
                 if self.compiler.compiler_type == 'msvc':
                     cmake_args += [
-                        f'-DCMAKE_GENERATOR_PLATFORM={plat}'
+                        # f'-DCMAKE_GENERATOR_PLATFORM={plat}',
+                        '-G', 'Ninja'
                     ]
                 else:
                     cmake_args += [
                         '-G', 'MinGW Makefiles',
                     ]
 
+            pprint.pprint(cmake_args)
             subprocess.check_call(['cmake', ext.cmake_lists_dir] + cmake_args, cwd=self.build_temp)
             cmake_build_args = ['cmake', '--build', '.', '--config', cfg]
             if ext.target: cmake_build_args += ['--target', ext.target]
@@ -129,7 +133,7 @@ class CMakeBuildExt(build_ext):
         """finalize options"""
         super(CMakeBuildExt, self).finalize_options()
 
-        
+
 setup(
     name='sqsgenerator',
     version='0.1',
@@ -143,7 +147,7 @@ setup(
         'build_ext': CMakeBuildExt,
         'install': InstallCustom
     },
-    install_requires=['attrdict', 'numpy', 'click', 'rich>=9.11.0', 'pyyaml', 'frozendict'],
+    install_requires=['six', 'numpy', 'click', 'rich>=9.11.0', 'pyyaml', 'frozendict'],
     entry_points={
         'console_scripts': ['sqsgen=sqsgenerator.cli:cli']
     },
